<?php

/**
* 
* 	@author 	Terazus <batistadominique@hotmail.com>
* 	CREATION DATE: 30 Mai 2017
* 	LAST UPDATE:  1 juin 2016(by Terazus)
*/


// TODO: resolves errors false positive with mutliples values not allowed
// Microdata, Multiples times the same object is not correctly processed throught prepare_microdata();
// Citation is null if there is a warning

require_once 'easyrdf/lib/EasyRdf.php';
require_once 'easyrdf/vendor/autoload.php';
require_once 'classes/BSCProcessor.php';
require_once 'classes/PreProcessor.php';
require_once 'PHP-Microdata/MicrodataParser.php';

function bioschemas_crawler_menu()
{
	$items['bioschemas_crawler'] = array( 
			'title' => t('Bioschemas structured data testing tool'), 
			'page callback' => 'bioschemas_crawler_page', 
			'access callback' => TRUE, 
			//'access arguments' => array(0),
			);

	return $items;
}

function bioschemas_crawler_page($form, &$form_state)
{


	$api_media = $_GET['media'];
	$api_url = $_GET['url'];
	$api_format = $_GET['format'];

	if ($api_media == 'json')
	{
		if (isset($api_format) and isset($api_url))
		{
			if ($api_format=='microdata')
			{
				$raw_json = new MicrodataParser($api_url);
				$json = json_decode($raw_json->getJson());
				$prepared_json = new PreProcessor($json, 'microdata');			
				$json = $prepared_json->output_json;
				output_JSONs_from_Microdata($json);
				exit;
			}

			if ($api_format=='rdfa'){
				$json_input = new EasyRdf_Graph($api_url);
				$json_input->load();
				$options = array('compact'=>true);
				$serialiser = new EasyRdf_Serialiser_JsonLd();
				$myjson = json_decode($serialiser->serialise($json_input, 'jsonld', $options));
				$prepared_json = new PreProcessor($myjson->{'@graph'}, 'rdfa');
				$myjson = $prepared_json->output_json;

				$allowed_main_object = array('softwareapplication', 'event');
				$new_json = array();
				foreach($myjson as $sub_json)
				{
					$new_subjson = $prepared_json->prepare_subRDFA($myjson, $sub_json);
					if (in_array(strtolower(str_replace('https://schema.org/', '', str_replace('http://schema.org/', '', $new_subjson->{'@type'}))), $allowed_main_object))
					{
						$new_subjson->{'@context'} = 'http://schema.org';
						array_push($new_json, $new_subjson);
					}
				}

				$item_counter = 0;
				$item_limit = count($new_json);
				echo '[';
				foreach ($new_json as $sub_json){
					$item_counter++;
					$tool = new BSCProcessor($sub_json);
					echo '{';
					echo '"error": '.json_encode($tool->error).',';
					echo '"warning": '.json_encode($tool->warning).',';
					echo '"json": '.json_encode($sub_json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
					echo '}';
					if ($item_counter!=$item_limit){
						echo',';
					}
				}
				echo ']';
				exit;
			}
		}
	}

	else
	{
		$form = drupal_get_form('bioschemas_crawler_form');
		return $form;
	}	
}

function bioschemas_crawler_form($form, &$form_state)
{

	
	$header_text = make_header();

	$_SESSION['myresult'] = NULL;

	$target_url = $_GET['url'];
	$target_method = $_GET['format'];

	$form['header'] = array(
    		'#markup' => $header_text,
  	);

	$form['target_url'] = array(
			'#type' => 'textfield',
			'#title' => t("Select target URL"),
			'#default_value' => "https://",
			'#required' => TRUE,
			'#default_value' => $target_url,
	);

	$form['target_format'] = array(
			'#title' => t("Select format of your input markup"),
			'#type' => 'select',
			'#options' => array(
						'jsonld'=>t('JSON-LD'),
						'rdfa'=>t('RDFA'), 
						'microdata'=>t('Microdata')),
			'#required' => TRUE,
			'#default_value' => $target_method,
	);

	$form['submit'] = array(
			'#type' => 'submit',
			'#value' => t("Submit query"),
			'#suffix' =>  '</div>',
	);

	if ($form_state['submitted']==TRUE){
		$form['result'] = array(
			'#markup' => display_result($form_state),
		);
	}


	return $form;
}

function display_result(&$form_state)
{


	$allowed_main_object = array('softwareapplication', 'event');
	$message = '<div class="output_container">';


	$api_media = $_GET['media'];
	
	if($form_state['input']['custom_input']== NULL){
		
		// Process RDFa 
		if($form_state['input']['target_format']=='rdfa'){
			$json_input = new EasyRdf_Graph($form_state['input']['target_url']);
			$json_input->load();
			$options = array('compact'=>true);
			$serialiser = new EasyRdf_Serialiser_JsonLd();
			$myjson = json_decode($serialiser->serialise($json_input, 'jsonld', $options));

			$prepared_json = new PreProcessor($myjson->{'@graph'}, 'rdfa');
			$myjson = $prepared_json->output_json;

			foreach($myjson as $sub_json){
				$new_json = $prepared_json->prepare_subRDFA($myjson, $sub_json);
				if (in_array(strtolower(str_replace('https://schema.org/', '', str_replace('http://schema.org/', '', $new_json->{'@type'}))), $allowed_main_object)){			
					$tool = new BSCProcessor($new_json);
					$insert_message = $tool->make_table();
					$message .= "<div class='bs_output'>".$insert_message."</div>";
					$message .= '<div class="json_display"><h4> Json code:</h4><pre contenteditable="true">'.json_encode($tool->values, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES).'</pre></div>';
					
				}
				
			}
		}

		// Process Microdata
		elseif($form_state['input']['target_format']=='microdata'){
			$raw_json = new MicrodataParser($form_state['input']['target_url']);
			$json = json_decode($raw_json->getJson());
			$prepared_json = new PreProcessor($json, 'microdata');			
			$json = $prepared_json->output_json;
			$item_counter == 0;

			if ($api_media == null){
				foreach ($json as $object){
					$validated_object = new BSCProcessor($object);
					if (!in_array('UNSUPPORTED', $validated_object->error))
					{
						$item_counter++;
						$insert_message = $validated_object->make_table();
						$message .= output_message($insert_message, $item_counter, json_encode($object, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
					}
				}
			}
		}

		// Process JSON-LD
		elseif ($form_state['input']['target_format']=='jsonld'){
			$context = stream_context_create(array('http' => array('ignore_errors' => true)));
			$html = file_get_contents($form_state['input']['target_url'], false, $context);
			$dom = new DOMDocument();
			libxml_use_internal_errors( 1 );
			$dom->loadHTML( $html );
			$xpath = new DOMXpath( $dom );

			$script = $dom->getElementsByTagName( 'script' );
			$script = $xpath->query( '//script[@type="application/ld+json"]' );


			$item_counter = 0;
			foreach ($script as $item)
			{
				$item_counter++;		
				$json = $item->nodeValue;

				if (isset(json_decode($json)->{'@graph'}))
				{
					foreach (json_decode($json)->{'@graph'} as $newtool)
					{
						$tool = new BSCProcessor($newtool);
						$insert_message = $tool->make_table();
						$message .= "<div class='bs_output'>".$insert_message."</div>";
						$message .= '<div class="json_display"><h4> Json code:</h4><pre contenteditable="true">'.json_encode(json_decode($json)->{'@graph'}, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES).'</pre></div>';
						dpm($tool->error);
					}
				}				

				else
				{
					$json = preg_replace("/[\r\n\t]+/", '', $json);
					$tool = new BSCProcessor(json_decode($json));
					$insert_message = $tool->make_table();
					$message .= output_message($insert_message, $item_counter, $json);
				}
			}
		}
	}
	return $message."</div>";
}


function output_JSONs_from_Microdata($json)
{
	$valid_objects_array = array();
	echo '[';

	foreach ($json as $object)
	{
		$validated_object = new BSCProcessor($object);
		if (!in_array('UNSUPPORTED', $validated_object->error))
		{
			array_push($valid_objects_array, $validated_object);
		}
	}

	$last_item = count($valid_objects_array);
	$current_item = 0;
	foreach ($valid_objects_array as $object){
		$current_item++;
		echo(json_encode($object->values, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES));
		if ($current_item!=$last_item)
		{
			echo ',';
		}
	}
	echo ']';
}


function bioschemas_crawler_form_submit($form, &$form_state)
{
	$form_state['submitted'] = TRUE;
	$form_state['rebuild'] = TRUE;
}

function output_message($insert_message, $item_counter, $input_json)
{
	$json = json_encode(json_decode($input_json), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
	$message = "
		<div class='BS_item' id='item_".$item_counter."'> 
			<div class='bs_output'>".$insert_message."</div>
			<div class='json_display'> <h4> Corresponding JSON-LD code </h4> <pre>".$json."</pre> </div>
	";			
	$message .= "</div>";
	return $message;
}


function make_header()
{
	global $base_url;


	$text = '
		<script type="application/ld+json">
		{
			"@context": "http://schema.org",
			"@type": "SoftwareApplication",
			"name": "Bioschemas validator",
			"featureList":"http://edamontology.org/operation_0004",
			"description": "This tool is designed to validate the fields of a schema.org object based on Bioschemas specifications. It process a URL link to a page enhanced with schema.org markup and is able to read all three formats (Microdata, JSON-LD and RDFa).",
			"url": "https://www.france-bioinformatique.fr/en/bioschemas_crawler",
			"applicationCategory": ["Web Application"],
			"license":{
				"@type": "CreativeWork",
				"name": "LGPL-V3",
				"url": "https://github.com/terazus/bioschemas_validator_drupal7/blob/master/LICENCE",
				"description": "generic software licence"
			},
			"potentialAction": {
				"@type": "ControlAction",
				"object": {
					"@type": "Dataset",
					"additionalType": "http://edamontology.org/format_3749"
				},
				"result": {
					"@type": "Dataset",
					"additionalType": "http://edamontology.org/format_2331"
				}
			},
			"Citation": {
			    "@type":"CreativeWork",
			  	"name": "RSAT: regulatory sequence analysis tools.",
			    "url": "https://www.example.com/myarticle",
				"description": "This is a description"
			},
			"keywords":["http://edamontology.org/topic_3345"],
			"softwareVersion": "1.0",
			"publisher": [
			{
			   "@type": "Organization",
			   "name": "IFB",
			   "email": "contact@groupes.france-bioinformatique.fr",
			   "description": "French Institut of Bioinformatics (French Elixir Node)"
			},
			{
				"@type": "Person",
				"name": "Batista Dominique",
				"email": "dominique.batista@france-bioinformatique.fr",
				"description": "Web developer @ IFB-Core"
			}
			],
			"dateCreated":"07/06/2017",
			"dateModified":"09/09/2017"
		}
		</script>
	';
	return $text;
}

?>